594 Â· strStr II




public class Solution {
    /*
     * @param source: A source string
     * @param target: A target string
     * @return: An integer as index
     */
    public int strStr2(String source, String target) {
        // write your code here
        if (source == null || target == null) return -1;
        if (target.length() == 0) return 0;

        for (int i = 0; i <= source.length() - target.length(); i++) {
            if(source.charAt(i) == target.charAt(0) && match(source, target, i)) {
                return i;
            }
        }
        return -1;
    }

    private boolean match(String source, String target, int index) {
        int j = 0;
        for (int i = index; i < target.length() && i < source.length(); i++) {
            if (source.charAt(i) != target.charAt(j)) return false;
            j++;
        }
        return true;
    }
}


public class Solution {
    public int BASE = 1000000;
    /*
     * @param source: A source string
     * @param target: A target string
     * @return: An integer as index
     */
    public int strStr2(String source, String target) {
        // write your code here
        if (source == null || target == null) return -1;
        int m = target.length();
        if (m == 0) return 0;
        // 31 ^ m
        int power = 1;
        for (int i = 0; i < m; i++) {
            power = (power * 31) % BASE;
        }

        int targetCode = 0;
        for (int i = 0; i < m; i++) {
            targetCode = (targetCode * 31 + target.charAt(i)) % BASE;
        }

        int hashCode = 0;
        for (int i = 0; i < source.length(); i++) {
            // abc + d
            hashCode = (hashCode * 31 + source.charAt(i))  % BASE;
            if (i < m -1) {
                continue;
            }
            //abcd - a
            if (i >= m) {
                hashCode = hashCode - (source.charAt(i - m) * power) % BASE;
                if (hashCode < 0) {
                    hashCode += BASE;
                }
            }
            if (hashCode == targetCode) {
                if(source.substring(i - m + 1, i + 1).equals(target)) {
                    return i - m + 1;
                }
            }
        }
        return -1;
    }
}
